<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{3fa504f6-db2b-4889-a5d5-d9357cd86edc}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	bRun : BOOL := FALSE; // main control	

	axes : ARRAY[0..3] OF AXIS_REF; // [BL BR TL TR] (linked in MOTION)
	
	// indexes
	iFirstIdx : INT := 0;
	iEndIdx : INT := 3;
	
	// motion control function blocks
	arrMCResets        		: ARRAY[0..3] OF MC_Reset;
	arrMCPowers				: ARRAY[0..3] OF MC_Power;
	arrMCSetPositions		: ARRAY[0..3] OF MC_SetPosition;
	arrMCHalts				: ARRAY[0..3] OF MC_Halt;
	
	arrHexErrors : ARRAY[0..3] OF T_MaxString; // store hex format of axes errors
	
	i: INT; // generic loop index 1
	j: INT; // generic loop index 2
	
	bStarted : BOOL := FALSE; // if started is complete
	// button bools
	bStart  : BOOL := FALSE;
	bStop   : BOOL := TRUE;
	
	// taps
	bResetFaults :BOOL := FALSE;
	
	// values in HMI
	arrTorqIns : ARRAY[0..3] OF INT;
	arrTorques AT %Q* : ARRAY[0..3] OF INT;
	
	iMaxVel : INT := 3600; // max 10 hz
	eDirec : MC_Direction := MC_Direction.MC_Negative_Direction;
	iDirMult : INT := -1; // multiplier: actVel = setVel * mult (used to reverse default)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
FOR i := iFirstIdx TO iEndIdx DO
	// UPDATE AXES STATUS
	axes[i].ReadStatus();
	// UPDATE HEX ERRORS
	arrHexErrors[i] := WORD_TO_HEXSTR(in:=UDINT_TO_WORD(MAIN.axes[i].Status.ErrorID), iPrecision:=4, bLoCase:=FALSE);
	// RESTRICT VELOCITY
	IF ABS(axes[i].NcToPlc.ActVelo) > iMaxVel THEN
		M_SetState(0);
	END_IF
END_FOR



// RUN STATE SELECTION
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// prevent turning off a button, only swapping allowed
IF bRun AND NOT bStop THEN
	bStart := TRUE;
ELSIF NOT bRun AND NOT bStart THEN
	bStop := TRUE;
ELSE // invalid state
	bStop := TRUE;
END_IF

// on off logic
IF NOT bRun AND bStart THEN
	M_SetState(1);
END_IF
IF bStop THEN
	M_SetState(0);
END_IF
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


// STARTUP
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
IF NOT bStarted THEN
	FOR i := iFirstIdx TO iEndIdx DO
		// default to OFF despite variable values
		M_SetState(0);
		arrMCResets[i](Axis:=axes[i]);
		arrMCPowers[i](Axis:=axes[i], Enable:= TRUE, Enable_Positive:=TRUE, Enable_Negative:=TRUE);
		// if all motors powered, set to started
		FOR j := iFirstIdx TO iEndIdx DO
			IF NOT arrMCPowers[j].Status THEN
				EXIT;
			ELSIF j = iEndIdx THEN
				bStarted := TRUE;
			END_IF
		END_FOR
	END_FOR
END_IF
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

IF bStarted THEN
	FOR i := iFirstIdx TO iEndIdx DO
		IF bRun THEN
			arrTorques[i] := arrTorqIns[i];
		END_IF
		M_Stop(iAxis := i, bExecute := NOT bRun);
	END_FOR
END_IF]]></ST>
    </Implementation>
    <Method Name="M_SetState" Id="{283bdda5-0135-4e32-b278-b4d97e5b1b98}">
      <Declaration><![CDATA[METHOD M_SetState
VAR_INPUT
	iState : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE iState OF
	0 :
		bRun := FALSE;
		bStart := FALSE;
		bStop := TRUE;	
	1 :
		bRun := TRUE;
		bStart := TRUE;
		bStop := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{f790cfef-3ecd-420e-a9c7-88ea80af48bc}">
      <Declaration><![CDATA[METHOD M_Stop
VAR_INPUT
	iAxis : INT;
	bExecute : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bExecute THEN
	arrMCHalts[iAxis](Axis := axes[iAxis], Execute := TRUE);
	arrTorques[iAxis] := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="13417" Count="0" />
      <LineId Id="13008" Count="0" />
      <LineId Id="13779" Count="1" />
      <LineId Id="13901" Count="1" />
      <LineId Id="13783" Count="0" />
      <LineId Id="13781" Count="1" />
      <LineId Id="13009" Count="0" />
      <LineId Id="13326" Count="0" />
      <LineId Id="14114" Count="0" />
      <LineId Id="14135" Count="0" />
      <LineId Id="14115" Count="17" />
      <LineId Id="13660" Count="0" />
      <LineId Id="14133" Count="1" />
      <LineId Id="13659" Count="0" />
      <LineId Id="13413" Count="0" />
      <LineId Id="13341" Count="0" />
      <LineId Id="13327" Count="2" />
      <LineId Id="13332" Count="2" />
      <LineId Id="13336" Count="0" />
      <LineId Id="14105" Count="0" />
      <LineId Id="14111" Count="1" />
      <LineId Id="14109" Count="1" />
      <LineId Id="14106" Count="0" />
      <LineId Id="13339" Count="1" />
      <LineId Id="13010" Count="0" />
      <LineId Id="13414" Count="0" />
      <LineId Id="14058" Count="0" />
      <LineId Id="14050" Count="0" />
      <LineId Id="14065" Count="0" />
      <LineId Id="14139" Count="2" />
      <LineId Id="14066" Count="0" />
      <LineId Id="14059" Count="0" />
      <LineId Id="452" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.M_SetState">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.M_Stop">
      <LineId Id="11" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>