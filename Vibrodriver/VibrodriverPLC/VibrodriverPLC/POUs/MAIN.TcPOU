<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{3fa504f6-db2b-4889-a5d5-d9357cd86edc}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	bRun : BOOL := FALSE; // main control	

	axes : ARRAY[0..3] OF AXIS_REF; // [BL BR TL TR] (linked in MOTION)
	
	// motion control function blocks
	arrMCResets        		: ARRAY[0..3] OF MC_Reset;
	arrMCPowers				: ARRAY[0..3] OF MC_Power;
	arrMCSetPositions		: ARRAY[0..3] OF MC_SetPosition;
	arrMCMoveAbsolutes		: ARRAY[0..3] OF MC_MoveAbsolute;
	arrMCMoveRelatives		: ARRAY[0..3] OF MC_MoveRelative;
	arrMCMoveVelocitys 		: ARRAY[0..3] OF MC_MoveVelocity;
	arrMCHalts				: ARRAY[0..3] OF MC_Halt;
	arrMCGearIns			: ARRAY[1..3] OF MC_GearIn;
	arrMCGearOuts			: ARRAY[1..3] OF MC_GearOut;
	arrMCPhaseAbsolutes     : ARRAY[1..3] OF MC_PhasingAbsolute;
	
	arrRelsDone : ARRAY[0..3] OF BOOL; // keep track of if each motor is done its relative movement
	arrRelsDoneZero : ARRAY[0..3] OF BOOL; // keep track of if each motor is done its relative movement
	arrMCMoveRelativesZero	: ARRAY[0..3] OF MC_MoveRelative;
	
	i: INT; // generic loop index 1
	j: INT; // generic loop index 2
	
	iEndIdx : INT := 3; // sets number of motors to set
	bStarted : BOOL := FALSE; // if started is complete
	bCoupled : BOOL := FALSE;
	iMode : INT := 2; // 0 = move abs, 1 = move rel, 2 = move vel, 3 = zero nearest
	
	// button bools
	bStart  : BOOL := FALSE;
	bStop   : BOOL := TRUE;
	bCouple : BOOL := FALSE;
	bAbsPos : BOOL := FALSE;
	bRelPos	: BOOL := FALSE;
	bVel	: BOOL := TRUE;
	
	// taps
	bZeroNear : BOOL := FALSE;
	
	// values in HMI
	iPos : INT := 0;
	iVel : INT := 200;
	iAcc : INT := 100;
	iPhs : INT := 0;
	
	// track previous values for updating function blocks
	iPrevPos : INT := iPos;
	iPrevVel : INT := iVel;
	iPrevAcc : INT := iAcc;
	iPrevPhs : INT := iPhs;
	
	iZeroPos : LREAL := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR i := 0 TO 3 DO
	axes[i].ReadStatus();
END_FOR


//======================================================
//======================================================

// prevent turning off a button, only swapping allowed
IF bRun AND NOT bStop THEN
	bStart := TRUE;
ELSIF NOT bRun AND NOT bStart THEN
	bStop := TRUE;
ELSE // invalid state
	bStop := TRUE;
END_IF

// on off logic
IF NOT bRun AND bStart THEN 
	bStop := FALSE;
	bRun := TRUE;
END_IF
// always have stop check last
IF bStop THEN
	bStart := FALSE;
	bRun := FALSE;
END_IF

// prevent no mode selection
IF NOT bAbsPos AND iMode = 0 THEN
	bAbsPos := TRUE;
ELSIF NOT bRelPos AND iMode = 1 THEN
	bRelPos := TRUE;
ELSIF NOT bVel AND iMode = 2 THEN
	bVel := TRUE;
END_IF

// switch modes
IF iMode = 3 THEN
	bAbsPos := FALSE;
	bRelPos := FALSE;
	bVel := FALSE;
ELSIF bRelPos AND iMode <> 1 THEN
	bAbsPos := FALSE;
	bVel := FALSE;
	iMode := 1;
ELSIF bVel AND iMode <> 2 THEN
	bAbsPos := FALSE;
	bRelPos := FALSE;
	iMode := 2;
ELSIF bAbsPos AND iMode <> 0 THEN
	bRelPos := FALSE;
	bVel := FALSE;
	iMode := 0;
END_IF

IF bZeroNear AND NOT bRun THEN
	iMode := 3;
	bStart := TRUE;
	bStop := FALSE;
	bRun:= TRUE;
	bAbsPos := FALSE;
	bRelPos := FALSE;
	bVel := FALSE;
END_IF
//======================================================
//======================================================

// disallow coupling while in motion
IF (axes[0].Status.Moving OR axes[1].Status.Moving OR axes[2].Status.Moving OR axes[3].Status.Moving) AND
		bCouple AND NOT bCoupled THEN
	bCouple := FALSE;
END_IF

// COUPLE/UNCOUPLE GEARS
arrMCGearOuts[1](Slave:=axes[1], Execute:=NOT bCouple AND bCoupled);
arrMCGearOuts[2](Slave:=axes[2], Execute:=NOT bCouple AND bCoupled);
arrMCGearOuts[3](Slave:=axes[3], Execute:=NOT bCouple AND bCoupled);
arrMCGearIns[1](Master:=axes[0], Slave:=axes[1], Execute:=bCouple AND NOT bCoupled, RatioNumerator:=-1);
arrMCGearIns[2](Master:=axes[0], Slave:=axes[2], Execute:=bCouple AND NOT bCoupled, RatioNumerator:=1);
arrMCGearIns[3](Master:=axes[2], Slave:=axes[3], Execute:=bCouple AND NOT bCoupled, RatioNumerator:=-1);

// check if uncoupling done
IF (NOT bCouple AND bCoupled) AND (arrMCGearOuts[1].Done AND arrMCGearOuts[2].Done AND arrMCGearOuts[3].Done) THEN
	iEndIdx := 3;
	bCoupled := FALSE;
END_IF
// check if coupling done
IF (bCouple AND NOT bCoupled) AND (arrMCGearIns[1].InGear AND arrMCGearIns[2].InGear AND arrMCGearIns[3].InGear) THEN
	iEndIdx := 0;
	bCoupled := TRUE;
END_IF
//======================================================
//======================================================


// startup
IF NOT bStarted THEN
	FOR i := 0 TO 3 DO
		// default to OFF despite variable values
		bStart := FALSE;
		bStop := TRUE;
		bRun := FALSE;
		arrMCResets[i](Axis:=axes[i]);
		arrMCPowers[i](Axis:=axes[i], Enable:= TRUE, Enable_Positive:=TRUE, Enable_Negative:=TRUE);
			
		// if all motors powered, set to started
		IF arrMCPowers[0].Status AND arrMCPowers[1].Status AND arrMCPowers[2].Status AND arrMCPowers[3].Status THEN
			bStarted := TRUE;
		END_IF
	END_FOR
END_IF
//======================================================
//======================================================


// if all motors powered up, enter main loop
IF bStarted THEN
	// set phase, master = BL, slave = TL

	// if uncoupled, allign the axes AT 0 phase again
	IF iPrevPhs <> iPhs THEN
		arrMCPhaseAbsolutes[1](Master:=axes[0], Slave:=axes[1], Execute:=FALSE); // set phase of BR w BL
		arrMCPhaseAbsolutes[2](Master:=axes[0], Slave:=axes[2], Execute:=FALSE); // set phase of top w bottom
		arrMCPhaseAbsolutes[3](Master:=axes[2], Slave:=axes[3], Execute:=FALSE); // set phase of TR w TL
		iPrevPhs := iPhs;
	END_IF
	
	IF bRun AND bCoupled THEN
		 // set phase of BR w BL
		arrMCPhaseAbsolutes[1](Master:=axes[0], Slave:=axes[1], Execute:=TRUE, PhaseShift:=0, Velocity:=iVel+200);
		 // set phase of top w bottom
		arrMCPhaseAbsolutes[2](Master:=axes[0], Slave:=axes[2], Execute:=TRUE, PhaseShift:=iPhs, Velocity:=iVel+200);
		 // set phase of TR w TL
		arrMCPhaseAbsolutes[3](Master:=axes[2], Slave:=axes[3], Execute:=TRUE, PhaseShift:=0, Velocity:=iVel+200);
	END_IF
	
	FOR i := 0 TO iEndIdx DO
		
		// if values have been updated, unexecute relevant functions so that they can restart with correct values
		IF (iPrevVel <> iVel) OR (iPrevAcc <> iAcc) THEN
			arrMCMoveAbsolutes[i](Axis:=axes[i], Execute:=FALSE);
			arrMCMoveRelatives[i](Axis:=axes[i], Execute:=FALSE);
			arrMCMoveVelocitys[i](Axis:=axes[i], Execute:=FALSE);
		ELSIF iPrevPos <> iPos THEN
			arrMCMoveAbsolutes[i](Axis:=axes[i], Execute:=FALSE);
			arrMCMoveRelatives[i](Axis:=axes[i], Execute:=FALSE);
		END_IF
		// if last index then set the previous values for change checks above ^
		IF i = iEndIdx THEN
			iPrevPos := iPos;
			iPrevVel := iVel;
			iPrevAcc := iAcc;
		END_IF
		
		// check if relative movement is done, set to stop
		IF arrMCMoveRelatives[i].Done  THEN
			arrRelsDone[i] := TRUE;
			FOR j := 0 TO iEndIdx DO
				IF arrRelsDone[j] = FALSE THEN EXIT; END_IF
				IF j = iEndIdx THEN
					bStop := TRUE;
					bStart := FALSE;
					bRun := FALSE;
					arrRelsDone[0] := FALSE;
					arrRelsDone[1] := FALSE;
					arrRelsDone[2] := FALSE;
					arrRelsDone[3] := FALSE;
					IF iMode=3 THEN
						iZeroPos := 0;
						iMode := 2;
					END_IF
				END_IF
			END_FOR
		END_IF
		// check if relative movement is done, set to stop
		IF arrMCMoveRelativesZero[i].Done  THEN
			arrRelsDoneZero[i] := TRUE;
			FOR j := 0 TO iEndIdx DO
				IF arrRelsDoneZero[j] = FALSE THEN EXIT; END_IF
				IF j = iEndIdx THEN
					bStop := TRUE;
					bStart := FALSE;
					bRun := FALSE;
					arrRelsDoneZero[0] := FALSE;
					arrRelsDoneZero[1] := FALSE;
					arrRelsDoneZero[2] := FALSE;
					arrRelsDoneZero[3] := FALSE;
					IF iMode=3 THEN
						iZeroPos := 0;
						iMode := 2;
					END_IF
				END_IF
			END_FOR
		END_IF
		
		IF iMode = 3 AND iZeroPos = 0 THEN
			IF axes[i].NcToPlc.ModuloActPos > 180 THEN
				iZeroPos := 360 - axes[i].NcToPlc.ModuloActPos;
			ELSE
				iZeroPos := -axes[i].NcToPlc.ModuloActPos;
			END_IF
		END_IF
		
		// run main operations, execute values based on various bools
		arrMCSetPositions[i](Axis:=axes[i], Execute:=TRUE, Position:=0); // very important for some reason
		
		arrMCMoveAbsolutes[i](Axis:=axes[i], Execute:= iMode=0 AND bRun,
								Position:=iPos, Velocity:=iVel, Acceleration:=iAcc, Deceleration:=iAcc);
								
		arrMCMoveRelatives[i](Axis:=axes[i], Execute:= iMode=1 AND bRun AND NOT arrRelsDone[i],
								Distance:=iPos, Velocity:=iVel, Acceleration:=iAcc, Deceleration:=iAcc);
								
		arrMCMoveVelocitys[i](Axis:=axes[i], Execute:= iMode=2 AND bRun,
								Velocity:=iVel, Acceleration:=iAcc, Deceleration:=iAcc);
								
		arrMCMoveRelativesZero[i](Axis:=axes[i], Execute:= iMode=3 AND bRun AND NOT arrRelsDoneZero[i],
								Distance:=iZeroPos, Velocity:=iVel, Acceleration:=iAcc, Deceleration:=iAcc);
		
		// NEVER MOVE FROM LAST CALL
		arrMCHalts[i](Axis:=axes[i],Execute:=NOT bRun, Deceleration:=400);
	END_FOR
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="13008" Count="37" />
      <LineId Id="13232" Count="2" />
      <LineId Id="13049" Count="8" />
      <LineId Id="13235" Count="2" />
      <LineId Id="13061" Count="16" />
      <LineId Id="13296" Count="0" />
      <LineId Id="13078" Count="57" />
      <LineId Id="13299" Count="0" />
      <LineId Id="13136" Count="0" />
      <LineId Id="13298" Count="0" />
      <LineId Id="13137" Count="1" />
      <LineId Id="13297" Count="0" />
      <LineId Id="13139" Count="59" />
      <LineId Id="13223" Count="6" />
      <LineId Id="13199" Count="0" />
      <LineId Id="13230" Count="0" />
      <LineId Id="13200" Count="1" />
      <LineId Id="13300" Count="0" />
      <LineId Id="13202" Count="0" />
      <LineId Id="13302" Count="0" />
      <LineId Id="13306" Count="0" />
      <LineId Id="13203" Count="0" />
      <LineId Id="13303" Count="0" />
      <LineId Id="13307" Count="0" />
      <LineId Id="13204" Count="0" />
      <LineId Id="13304" Count="0" />
      <LineId Id="13308" Count="0" />
      <LineId Id="13210" Count="0" />
      <LineId Id="13305" Count="0" />
      <LineId Id="13212" Count="0" />
      <LineId Id="13231" Count="0" />
      <LineId Id="13213" Count="2" />
      <LineId Id="452" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>